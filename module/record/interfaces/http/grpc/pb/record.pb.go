// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: module/record/interfaces/http/grpc/pb/record.proto

package record

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CreateRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateRecordRequest) Reset() {
	*x = CreateRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_record_interfaces_http_grpc_pb_record_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecordRequest) ProtoMessage() {}

func (x *CreateRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_module_record_interfaces_http_grpc_pb_record_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecordRequest.ProtoReflect.Descriptor instead.
func (*CreateRecordRequest) Descriptor() ([]byte, []int) {
	return file_module_record_interfaces_http_grpc_pb_record_proto_rawDescGZIP(), []int{0}
}

func (x *CreateRecordRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateRecordRequest) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type GetRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetRecordRequest) Reset() {
	*x = GetRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_record_interfaces_http_grpc_pb_record_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordRequest) ProtoMessage() {}

func (x *GetRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_module_record_interfaces_http_grpc_pb_record_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordRequest.ProtoReflect.Descriptor instead.
func (*GetRecordRequest) Descriptor() ([]byte, []int) {
	return file_module_record_interfaces_http_grpc_pb_record_proto_rawDescGZIP(), []int{1}
}

func (x *GetRecordRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Data      string               `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,3,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (x *RecordResponse) Reset() {
	*x = RecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_record_interfaces_http_grpc_pb_record_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordResponse) ProtoMessage() {}

func (x *RecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_module_record_interfaces_http_grpc_pb_record_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordResponse.ProtoReflect.Descriptor instead.
func (*RecordResponse) Descriptor() ([]byte, []int) {
	return file_module_record_interfaces_http_grpc_pb_record_proto_rawDescGZIP(), []int{2}
}

func (x *RecordResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RecordResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *RecordResponse) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

var File_module_record_interfaces_http_grpc_pb_record_proto protoreflect.FileDescriptor

var file_module_record_interfaces_http_grpc_pb_record_proto_rawDesc = []byte{
	0x0a, 0x32, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2f,
	0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x62, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x39, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x22, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6e, 0x0a, 0x0e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x32, 0x5d, 0x0a, 0x14,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x1b, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x59, 0x0a, 0x12, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x43, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79,
	0x49, 0x44, 0x12, 0x18, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_module_record_interfaces_http_grpc_pb_record_proto_rawDescOnce sync.Once
	file_module_record_interfaces_http_grpc_pb_record_proto_rawDescData = file_module_record_interfaces_http_grpc_pb_record_proto_rawDesc
)

func file_module_record_interfaces_http_grpc_pb_record_proto_rawDescGZIP() []byte {
	file_module_record_interfaces_http_grpc_pb_record_proto_rawDescOnce.Do(func() {
		file_module_record_interfaces_http_grpc_pb_record_proto_rawDescData = protoimpl.X.CompressGZIP(file_module_record_interfaces_http_grpc_pb_record_proto_rawDescData)
	})
	return file_module_record_interfaces_http_grpc_pb_record_proto_rawDescData
}

var file_module_record_interfaces_http_grpc_pb_record_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_module_record_interfaces_http_grpc_pb_record_proto_goTypes = []interface{}{
	(*CreateRecordRequest)(nil), // 0: record.CreateRecordRequest
	(*GetRecordRequest)(nil),    // 1: record.GetRecordRequest
	(*RecordResponse)(nil),      // 2: record.RecordResponse
	(*timestamp.Timestamp)(nil), // 3: google.protobuf.Timestamp
}
var file_module_record_interfaces_http_grpc_pb_record_proto_depIdxs = []int32{
	3, // 0: record.RecordResponse.createdAt:type_name -> google.protobuf.Timestamp
	0, // 1: record.RecordCommandService.CreateRecord:input_type -> record.CreateRecordRequest
	1, // 2: record.RecordQueryService.GetRecordByID:input_type -> record.GetRecordRequest
	2, // 3: record.RecordCommandService.CreateRecord:output_type -> record.RecordResponse
	2, // 4: record.RecordQueryService.GetRecordByID:output_type -> record.RecordResponse
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_module_record_interfaces_http_grpc_pb_record_proto_init() }
func file_module_record_interfaces_http_grpc_pb_record_proto_init() {
	if File_module_record_interfaces_http_grpc_pb_record_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_module_record_interfaces_http_grpc_pb_record_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_record_interfaces_http_grpc_pb_record_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_record_interfaces_http_grpc_pb_record_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_module_record_interfaces_http_grpc_pb_record_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_module_record_interfaces_http_grpc_pb_record_proto_goTypes,
		DependencyIndexes: file_module_record_interfaces_http_grpc_pb_record_proto_depIdxs,
		MessageInfos:      file_module_record_interfaces_http_grpc_pb_record_proto_msgTypes,
	}.Build()
	File_module_record_interfaces_http_grpc_pb_record_proto = out.File
	file_module_record_interfaces_http_grpc_pb_record_proto_rawDesc = nil
	file_module_record_interfaces_http_grpc_pb_record_proto_goTypes = nil
	file_module_record_interfaces_http_grpc_pb_record_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RecordCommandServiceClient is the client API for RecordCommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RecordCommandServiceClient interface {
	CreateRecord(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*RecordResponse, error)
}

type recordCommandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordCommandServiceClient(cc grpc.ClientConnInterface) RecordCommandServiceClient {
	return &recordCommandServiceClient{cc}
}

func (c *recordCommandServiceClient) CreateRecord(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*RecordResponse, error) {
	out := new(RecordResponse)
	err := c.cc.Invoke(ctx, "/record.RecordCommandService/CreateRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordCommandServiceServer is the server API for RecordCommandService service.
type RecordCommandServiceServer interface {
	CreateRecord(context.Context, *CreateRecordRequest) (*RecordResponse, error)
}

// UnimplementedRecordCommandServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRecordCommandServiceServer struct {
}

func (*UnimplementedRecordCommandServiceServer) CreateRecord(context.Context, *CreateRecordRequest) (*RecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecord not implemented")
}

func RegisterRecordCommandServiceServer(s *grpc.Server, srv RecordCommandServiceServer) {
	s.RegisterService(&_RecordCommandService_serviceDesc, srv)
}

func _RecordCommandService_CreateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordCommandServiceServer).CreateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/record.RecordCommandService/CreateRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordCommandServiceServer).CreateRecord(ctx, req.(*CreateRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RecordCommandService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "record.RecordCommandService",
	HandlerType: (*RecordCommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRecord",
			Handler:    _RecordCommandService_CreateRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "module/record/interfaces/http/grpc/pb/record.proto",
}

// RecordQueryServiceClient is the client API for RecordQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RecordQueryServiceClient interface {
	GetRecordByID(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*RecordResponse, error)
}

type recordQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordQueryServiceClient(cc grpc.ClientConnInterface) RecordQueryServiceClient {
	return &recordQueryServiceClient{cc}
}

func (c *recordQueryServiceClient) GetRecordByID(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*RecordResponse, error) {
	out := new(RecordResponse)
	err := c.cc.Invoke(ctx, "/record.RecordQueryService/GetRecordByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordQueryServiceServer is the server API for RecordQueryService service.
type RecordQueryServiceServer interface {
	GetRecordByID(context.Context, *GetRecordRequest) (*RecordResponse, error)
}

// UnimplementedRecordQueryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRecordQueryServiceServer struct {
}

func (*UnimplementedRecordQueryServiceServer) GetRecordByID(context.Context, *GetRecordRequest) (*RecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecordByID not implemented")
}

func RegisterRecordQueryServiceServer(s *grpc.Server, srv RecordQueryServiceServer) {
	s.RegisterService(&_RecordQueryService_serviceDesc, srv)
}

func _RecordQueryService_GetRecordByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordQueryServiceServer).GetRecordByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/record.RecordQueryService/GetRecordByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordQueryServiceServer).GetRecordByID(ctx, req.(*GetRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RecordQueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "record.RecordQueryService",
	HandlerType: (*RecordQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRecordByID",
			Handler:    _RecordQueryService_GetRecordByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "module/record/interfaces/http/grpc/pb/record.proto",
}
